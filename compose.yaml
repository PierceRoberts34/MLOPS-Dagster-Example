services:
# CI/CD
  jenkins:
    image: jenkins/jenkins:lts
    ports:
      - "9000:8080"
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
  ssh-agent:
    image: jenkins/ssh-agent

# Mlflow Database
  postgres:
    image: postgres:15
    container_name: mlflow-postgres
    environment:
      POSTGRES_USER: mlflow
      POSTGRES_PASSWORD: mlflow
      POSTGRES_DB: mlflow
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mlflow"]
      interval: 5s
      timeout: 3s
      retries: 10

# MLFlow Tracking Server
  mlflow:
      image: ghcr.io/mlflow/mlflow:latest
      ports:
        - "5000:5000"
      depends_on:
        postgres:
          condition: service_healthy
      environment:
        MLFLOW_BACKEND_STORE_URI: postgresql://mlflow:mlflow@postgres:5432/mlflow
        MLFLOW_HOST: 0.0.0.0
        MLFLOW_PORT: 5000
      command: >
        /bin/bash -c "
          pip install --no-cache-dir psycopg2-binary boto3 &&
          mlflow server \
            --backend-store-uri postgresql://mlflow:mlflow@postgres:5432/mlflow \
            --host 0.0.0.0 \
            --port 5000
        "

  # Dagster Database
  docker_postgresql_database:
    image: postgres:11
    container_name: docker_postgresql_database
    environment:
      POSTGRES_USER: 'postgres_user'
      POSTGRES_PASSWORD: 'postgres_password'
      POSTGRES_DB: 'postgres_db'
    networks:
      - docker_example_network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres_user -d postgres_db']
      interval: 10s
      timeout: 8s
      retries: 5

# User code server
  docker_sensor_data_code:
    build:
      context: .
      dockerfile: ./docker/Dockerfile_code
    container_name: docker_sensor_data_code
    ports:
      - '8080:8080'
    image: sensor_data_code_image
    restart: always
    volumes:
      - ./keys:/opt/dagster/app/keys # Bind mount for the keyfiles
    environment:
      DAGSTER_POSTGRES_USER: 'postgres_user'
      DAGSTER_POSTGRES_PASSWORD: 'postgres_password'
      DAGSTER_POSTGRES_DB: 'postgres_db'
      DAGSTER_CURRENT_IMAGE: 'sensor_data_code_image'
    env_file: '.env'
    networks:
      - docker_example_network

# Webserver for interaction
  docker_example_webserver:
    build:
      context: .
      dockerfile: ./docker/Dockerfile_dagster
    entrypoint:
      - dagster-webserver
      - -h
      - '0.0.0.0'
      - -p
      - '3000'
      - -w
      - workspace.yaml
    container_name: docker_example_webserver
    expose:
      - '3000'
    ports:
      - '3000:3000'
    environment:
      DAGSTER_POSTGRES_USER: 'postgres_user'
      DAGSTER_POSTGRES_PASSWORD: 'postgres_password'
      DAGSTER_POSTGRES_DB: 'postgres_db'
    env_file: '.env'
    volumes: # Make docker client accessible so we can terminate containers from the webserver
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - docker_example_network
    depends_on:
      docker_postgresql_database:
        condition: service_healthy
      docker_sensor_data_code:
        condition: service_started

  docker_example_daemon:
    build:
      context: .
      dockerfile: ./docker/Dockerfile_dagster
    entrypoint:
      - dagster-daemon
      - run
    container_name: docker_example_daemon
    restart: on-failure
    environment:
      DAGSTER_POSTGRES_USER: 'postgres_user'
      DAGSTER_POSTGRES_PASSWORD: 'postgres_password'
      DAGSTER_POSTGRES_DB: 'postgres_db'
    env_file: '.env'
    volumes: # Make docker client accessible so we can launch containers using host docker
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - docker_example_network
    depends_on:
      docker_postgresql_database:
        condition: service_healthy
      docker_sensor_data_code:
        condition: service_started

volumes:
  jenkins_home:
  pgdata:     
     
networks:
  docker_example_network:
    driver: bridge
    name: docker_example_network
